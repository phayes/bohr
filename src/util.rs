// Translate the string into a unicode superscript version of the same
pub fn superscript(s: String) -> String {
    s.chars()
        .map(|c| match c {
            '0' => '⁰',
            '1' => '¹',
            '2' => '²',
            '3' => '³',
            '4' => '⁴',
            '5' => '⁵',
            '6' => '⁶',
            '7' => '⁷',
            '8' => '⁸',
            '9' => '⁹',
            '-' => '⁻',
            '+' => '⁺',
            'A' => 'ᴬ',
            'B' => 'ᴮ',
            'C' => 'ᶜ',
            'D' => 'ᴰ',
            'E' => 'ᴱ',
            'F' => 'ᶠ',
            'G' => 'ᴳ',
            'H' => 'ᴴ',
            'I' => 'ᴵ',
            'J' => 'ᴶ',
            'K' => 'ᴷ',
            'L' => 'ᴸ',
            'M' => 'ᴹ',
            'N' => 'ᴺ',
            'O' => 'ᴼ',
            'P' => 'ᴾ',
            'R' => 'ᴿ',
            'S' => 'ˢ',
            'T' => 'ᵀ',
            'U' => 'ᵁ',
            'V' => 'ⱽ',
            'W' => 'ᵂ',
            'X' => 'ˣ',
            'Y' => 'ʸ',
            'Z' => 'ᶻ',
            'a' => 'ᵃ',
            'b' => 'ᵇ',
            'c' => 'ᶜ',
            'd' => 'ᵈ',
            'e' => 'ᵉ',
            'f' => 'ᶠ',
            'g' => 'ᵍ',
            'h' => 'ʰ',
            'i' => 'ⁱ',
            'j' => 'ʲ',
            'k' => 'ᵏ',
            'l' => 'ˡ',
            'm' => 'ᵐ',
            'n' => 'ⁿ',
            'o' => 'ᵒ',
            'p' => 'ᵖ',
            'r' => 'ʳ',
            's' => 'ˢ',
            't' => 'ᵗ',
            'u' => 'ᵘ',
            'v' => 'ᵛ',
            'w' => 'ʷ',
            'x' => 'ˣ',
            'y' => 'ʸ',
            'z' => 'ᶻ',
            '(' => '⁽',
            ')' => '⁾',
            '=' => '⁼',
            _ => c,
        })
        .collect()
}

// Translate the string into a unicode subscript version of the same
pub fn subscript(s: String) -> String {
    s.chars()
        .map(|c| match c {
            '0' => '₀',
            '1' => '₁',
            '2' => '₂',
            '3' => '₃',
            '4' => '₄',
            '5' => '₅',
            '6' => '₆',
            '7' => '₇',
            '8' => '₈',
            '9' => '₉',
            '-' => '₋',
            '+' => '₊',
            'A' => 'ₐ',
            'E' => 'ₑ',
            'H' => 'ₕ',
            'I' => 'ᵢ',
            'J' => 'ⱼ',
            'K' => 'ₖ',
            'L' => 'ₗ',
            'M' => 'ₘ',
            'N' => 'ₙ',
            'O' => 'ₒ',
            'P' => 'ₚ',
            'R' => 'ᵣ',
            'S' => 'ₛ',
            'T' => 'ₜ',
            'U' => 'ᵤ',
            'V' => 'ᵥ',
            'X' => 'ₓ',
            'a' => 'ₐ',
            'e' => 'ₑ',
            'i' => 'ᵢ',
            'j' => 'ⱼ',
            'k' => 'ₖ',
            'l' => 'ₗ',
            'm' => 'ₘ',
            'n' => 'ₙ',
            'o' => 'ₒ',
            'p' => 'ₚ',
            'r' => 'ᵣ',
            's' => 'ₛ',
            't' => 'ₜ',
            'u' => 'ᵤ',
            'v' => 'ᵥ',
            'x' => 'ₓ',
            '(' => '₍',
            ')' => '₎',
            '=' => '₌',
            _ => c,
        })
        .collect()
}

pub fn superscript_number(n: u8) -> &'static str {
    match n {
        0 => "⁰",
        1 => "¹",
        2 => "²",
        3 => "³",
        4 => "⁴",
        5 => "⁵",
        6 => "⁶",
        7 => "⁷",
        8 => "⁸",
        9 => "⁹",
        10 => "¹⁰",
        11 => "¹¹",
        12 => "¹²",
        13 => "¹³",
        14 => "¹⁴",
        15 => "¹⁵",
        16 => "¹⁶",
        _ => todo!("Implement remainder multi-digit superscript numbers by splitting into digits and mapping each digit to a superscript number"),
    }
}

pub fn regular_case(s: &str) -> String {
    s.chars()
        .map(|c| match c {
            '₀' => '0',
            '₁' => '1',
            '₂' => '2',
            '₃' => '3',
            '₄' => '4',
            '₅' => '5',
            '₆' => '6',
            '₇' => '7',
            '₈' => '8',
            '₉' => '9',
            '₋' => '-',
            '₊' => '+',
            'ₐ' => 'A',
            'ₑ' => 'E',
            'ₕ' => 'H',
            'ᵢ' => 'I',
            'ⱼ' => 'J',
            'ₖ' => 'K',
            'ₗ' => 'L',
            'ₘ' => 'M',
            'ₙ' => 'N',
            'ₒ' => 'O',
            'ₚ' => 'P',
            'ᵣ' => 'R',
            'ₛ' => 'S',
            'ₜ' => 'T',
            'ᵤ' => 'U',
            'ᵥ' => 'V',
            'ₓ' => 'X',
            '₍' => '(',
            '₎' => ')',
            '₌' => '=',
            '⁰' => '0',
            '¹' => '1',
            '²' => '2',
            '³' => '3',
            '⁴' => '4',
            '⁵' => '5',
            '⁶' => '6',
            '⁷' => '7',
            '⁸' => '8',
            '⁹' => '9',
            '⁻' => '-',
            '⁺' => '+',
            'ᴬ' => 'A',
            'ᴮ' => 'B',
            'ᶜ' => 'C',
            'ᴰ' => 'D',
            'ᴱ' => 'E',
            'ᶠ' => 'F',
            'ᴳ' => 'G',
            'ᴴ' => 'H',
            'ᴵ' => 'I',
            'ᴶ' => 'J',
            'ᴷ' => 'K',
            'ᴸ' => 'L',
            'ᴹ' => 'M',
            'ᴺ' => 'N',
            'ᴼ' => 'O',
            'ᴾ' => 'P',
            'ᴿ' => 'R',
            'ˢ' => 'S',
            'ᵀ' => 'T',
            'ᵁ' => 'U',
            'ⱽ' => 'V',
            'ᵂ' => 'W',
            'ˣ' => 'X',
            'ʸ' => 'Y',
            'ᶻ' => 'Z',
            'ᵃ' => 'a',
            'ᵇ' => 'b',
            'ᵈ' => 'd',
            'ᵉ' => 'e',
            'ᵍ' => 'g',
            'ʰ' => 'h',
            'ⁱ' => 'i',
            'ʲ' => 'j',
            'ᵏ' => 'k',
            'ˡ' => 'l',
            'ᵐ' => 'm',
            'ⁿ' => 'n',
            'ᵒ' => 'o',
            'ᵖ' => 'p',
            'ʳ' => 'r',
            'ᵗ' => 't',
            'ᵘ' => 'u',
            'ᵛ' => 'v',
            'ʷ' => 'w',
            '⁽' => '(',
            '⁾' => ')',
            '⁼' => '=',
            _ => c,
        })
        .collect()
}
